{"version":3,"file":"index.esm.js","sources":["../../src/index.tsx"],"sourcesContent":["import * as Qwik from '@builder.io/qwik'\nexport * from '@tanstack/table-core'\n\nimport {\n  TableOptions,\n  TableOptionsResolved,\n  RowData,\n  createTable,\n  type Table,\n} from '@tanstack/table-core'\n\ntype QwikComps = Qwik.Component | Qwik.FunctionComponent\n\nconst isFunction = (comp: unknown): comp is Function =>\n  typeof comp === 'function'\n\nconst isQwikComponent = (comp: unknown): comp is QwikComps =>\n  isFunction(comp) && comp.name === 'QwikComponent'\n\nexport function flexRender<TProps extends object>(\n  Comp: any, // TODO: add renderable type\n  props: TProps\n) {\n  return !Comp ? null : isQwikComponent(Comp) ? (\n    <Comp {...props} />\n  ) : isFunction(Comp) ? (\n    Comp(props)\n  ) : (\n    Comp\n  )\n}\n\nexport function useQwikTable<TData extends RowData>(\n  options: TableOptions<TData>\n) {\n  // Compose in the generic options to the user options\n  const resolvedOptions: TableOptionsResolved<TData> = {\n    state: {},\n    onStateChange: () => {},\n    renderFallbackValue: null,\n    ...options,\n  }\n\n  // Create a new table instance and store it in a Qwik store\n  const table = Qwik.useStore<{\n    instance: Qwik.NoSerialize<Table<TData>>\n  }>({\n    instance: Qwik.noSerialize(createTable(resolvedOptions)),\n  })\n\n  // By default, manage table state here using the table's initial state\n  const state = Qwik.useSignal(table.instance!.initialState)\n\n  // Compose the default state above with any user state. This will allow the user\n  // to only control a subset of the state if desired.\n  table.instance!.setOptions(prev => ({\n    ...prev,\n    ...options,\n    state: {\n      ...state.value,\n      ...options.state,\n    },\n    // Similarly, we'll maintain both our internal state and any user-provided\n    // state.\n    onStateChange: updater => {\n      state.value = updater instanceof Function ? updater(state.value) : updater\n      options.onStateChange?.(updater)\n    },\n  }))\n\n  return table.instance!\n}\n"],"names":["isFunction","comp","isQwikComponent","name","flexRender","Comp","props","React","createElement","useQwikTable","options","resolvedOptions","state","onStateChange","renderFallbackValue","table","Qwik","useStore","instance","noSerialize","createTable","useSignal","initialState","setOptions","prev","value","updater","Function"],"mappings":";;;;;;;;;;;;;;AAaA,MAAMA,UAAU,GAAIC,IAAa,IAC/B,OAAOA,IAAI,KAAK,UAAU,CAAA;AAE5B,MAAMC,eAAe,GAAID,IAAa,IACpCD,UAAU,CAACC,IAAI,CAAC,IAAIA,IAAI,CAACE,IAAI,KAAK,eAAe,CAAA;AAE5C,SAASC,UAAUA,CACxBC,IAAS;AAAE;AACXC,KAAa,EACb;AACA,EAAA,OAAO,CAACD,IAAI,GAAG,IAAI,GAAGH,eAAe,CAACG,IAAI,CAAC,gBACzCE,KAAA,CAAAC,aAAA,CAACH,IAAI,EAAKC,KAAQ,CAAC,GACjBN,UAAU,CAACK,IAAI,CAAC,GAClBA,IAAI,CAACC,KAAK,CAAC,GAEXD,IACD,CAAA;AACH,CAAA;AAEO,SAASI,YAAYA,CAC1BC,OAA4B,EAC5B;AACA;AACA,EAAA,MAAMC,eAA4C,GAAG;IACnDC,KAAK,EAAE,EAAE;AACTC,IAAAA,aAAa,EAAEA,MAAM,EAAE;AACvBC,IAAAA,mBAAmB,EAAE,IAAI;IACzB,GAAGJ,OAAAA;GACJ,CAAA;;AAED;AACA,EAAA,MAAMK,KAAK,GAAGC,IAAI,CAACC,QAAQ,CAExB;IACDC,QAAQ,EAAEF,IAAI,CAACG,WAAW,CAACC,WAAW,CAACT,eAAe,CAAC,CAAA;AACzD,GAAC,CAAC,CAAA;;AAEF;EACA,MAAMC,KAAK,GAAGI,IAAI,CAACK,SAAS,CAACN,KAAK,CAACG,QAAQ,CAAEI,YAAY,CAAC,CAAA;;AAE1D;AACA;AACAP,EAAAA,KAAK,CAACG,QAAQ,CAAEK,UAAU,CAACC,IAAI,KAAK;AAClC,IAAA,GAAGA,IAAI;AACP,IAAA,GAAGd,OAAO;AACVE,IAAAA,KAAK,EAAE;MACL,GAAGA,KAAK,CAACa,KAAK;AACd,MAAA,GAAGf,OAAO,CAACE,KAAAA;KACZ;AACD;AACA;IACAC,aAAa,EAAEa,OAAO,IAAI;AACxBd,MAAAA,KAAK,CAACa,KAAK,GAAGC,OAAO,YAAYC,QAAQ,GAAGD,OAAO,CAACd,KAAK,CAACa,KAAK,CAAC,GAAGC,OAAO,CAAA;MAC1EhB,OAAO,CAACG,aAAa,IAArBH,IAAAA,IAAAA,OAAO,CAACG,aAAa,CAAGa,OAAO,CAAC,CAAA;AAClC,KAAA;AACF,GAAC,CAAC,CAAC,CAAA;EAEH,OAAOX,KAAK,CAACG,QAAQ,CAAA;AACvB;;;;"}