/**
   * qwik-table
   *
   * Copyright (c) TanStack
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE.md file in the root directory of this source tree.
   *
   * @license MIT
   */
'use strict';

var Qwik = require('@builder.io/qwik');
var tableCore = require('@tanstack/table-core');

function _interopNamespaceDefault(e) {
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () { return e[k]; }
        });
      }
    });
  }
  n.default = e;
  return Object.freeze(n);
}

var Qwik__namespace = /*#__PURE__*/_interopNamespaceDefault(Qwik);

const isFunction = comp => typeof comp === 'function';
const isQwikComponent = comp => isFunction(comp) && comp.name === 'QwikComponent';
function flexRender(Comp,
// TODO: add renderable type
props) {
  return !Comp ? null : isQwikComponent(Comp) ? /*#__PURE__*/React.createElement(Comp, props) : isFunction(Comp) ? Comp(props) : Comp;
}
function useQwikTable(options) {
  // Compose in the generic options to the user options
  const resolvedOptions = {
    state: {},
    onStateChange: () => {},
    renderFallbackValue: null,
    ...options
  };

  // Create a new table instance and store it in a Qwik store
  const table = Qwik__namespace.useStore({
    instance: Qwik__namespace.noSerialize(tableCore.createTable(resolvedOptions))
  });

  // By default, manage table state here using the table's initial state
  const state = Qwik__namespace.useSignal(table.instance.initialState);

  // Compose the default state above with any user state. This will allow the user
  // to only control a subset of the state if desired.
  table.instance.setOptions(prev => ({
    ...prev,
    ...options,
    state: {
      ...state.value,
      ...options.state
    },
    // Similarly, we'll maintain both our internal state and any user-provided
    // state.
    onStateChange: updater => {
      state.value = updater instanceof Function ? updater(state.value) : updater;
      options.onStateChange == null || options.onStateChange(updater);
    }
  }));
  return table.instance;
}

exports.flexRender = flexRender;
exports.useQwikTable = useQwikTable;
Object.keys(tableCore).forEach(function (k) {
  if (k !== 'default' && !Object.prototype.hasOwnProperty.call(exports, k)) Object.defineProperty(exports, k, {
    enumerable: true,
    get: function () { return tableCore[k]; }
  });
});
//# sourceMappingURL=index.js.map
